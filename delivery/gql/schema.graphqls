type Query {
    bouquet(id: ID!): Bouquet
    seller(id: ID!): Seller
    customer(id: ID!): customer

    bouquets: [Bouquet!]!
    sellers: [Seller!]!
    purchases(customerId: ID!): [Purchase!]!
}

type Mutation {
    createCustomer(in: CreateCustomerDto!): customer!
    updateCustomer(in: UpdateCustomerDto!): customer!
    deleteCustomer(id: ID!): Boolean

    createBouquet(in: CreateBouquetDto!): Bouquet!
    updateBouquet(in: UpdateBouquetDto!): Bouquet!
    deleteBouquet(id: ID!): Boolean

    createSeller(in: CreateSellerDto!): Seller!
    updateSeller(in: UpdateSellerDto!): Seller!
    deleteSeller(id: ID!): Boolean

    purchaseBouquet(bouquetId: ID!, customerId: ID!): Boolean
}

input CreateCustomerDto {
    name: String!
    email: String!
}

input UpdateCustomerDto {
    id: ID!
    name: String
    email: String
}

input UpdateSellerDto {
    id: ID!
    shopName: String
    photoUrl: String
}

input UpdateBouquetDto {
    id: ID!
    name: String
    price: Int
    photoUrl: String
}

input CreateSellerDto {
    shopName: String!
    photoUrl: String!
}

input CreateBouquetDto {
    name: String!
    price: Int!
    photoUrl: String!
    sellerId: ID!
}

type Bouquet {
    id: ID!
    name: String!
    price: Int!
    photoUrl: String!
    seller: Seller!
}

type Seller {
    id: ID!
    shopName: String!
    photoUrl: String!
    createdDate: String!
    bouquets: [Bouquet!]!
    soldBouquetsAmount: Int!
}

type customer {
    id: ID!
    name: String!
    email: String!
    purchases: [Purchase!]!
}

type Purchase {
    id: ID!
    bouquet: Bouquet!
    customer: customer!
    price: Int!
    serviceIncome: Int!
}